#summary How to get Pylons working on appengine
#labels pylons,appengine

= Introduction =

This describes the steps, using appengine-monkey, to get Pylons working on appengine.

= Details =

appengine has several modules and functions disabled which, by themselves, make it impossible to import many Pylons packages.  appengine-monkey restores many of those modules, and puts together the structure for deploying a Pylons application.  It is not closely tied to Python: any application that uses Setuptools will find this project useful (necessary) to get things functioning.

Here's the basic instructions:

1. Acquire the code

Check out the source code for appengine-monkey, like:

{{{
svn checkout http://appengine-monkey.googlecode.com/svn/trunk/ appengine-monkey
}}}

2. Set up a new virtualenv-based sandbox.  

The option {{{--paste-deploy}}} tells it to write in the files for doing a [http://pythonpaste.org/deploy/ Paste Deploy] based application.  This reads a configuration file ({{{development.ini}}}) to load up the application, and sets up the CGI runner to send a request to that application.

Note that all applications need a unique name that you registered ahead of time with Google App Engine.  This name goes in your {{{app.yaml}}} file.  If you don't give {{{--app-name=a-name}}} then it will assume that the name of the directory you are using is the name of the application ({{{my-app}}} in the example):

{{{
python2.5 appengine-boot.py --paste-deploy my-app
}}}

You can put that anywhere, you don't have to put it under the appengine-monkey directory that you checked out.

3. Start using your virtualenv

You can use this virtualenv just like any other.  If you use {{{--paste-deploy}}}, the {{{paste-deploy.py}}} file will load up the libraries in the virtualenv.  Otherwise look at [http://appengine-monkey.googlecode.com/svn/trunk/paste-deploy.py paste-deploy.py] to get an idea of how to activate it.

To use a virtualenv for installing libraries and managing your project, do:

{{{
cd my-app
source bin/activate
}}}

This will change your prompt to help you remember you are working in the virtualenv, and commands you run will effect the virtualenv.  

4. Install the packages

In addition to Pylons, we'll install the trunk of Mako and Beaker.  Mako has been updated to work with App Engine in the trunk, and Beaker (the session system for Pylons) has been updated to use BigTable as a backend.

{{{
easy_install Mako==dev Beaker Pylons
}}}

5. Create your application

{{{
cd src
paster create --template=pylons MyApplication
}}}

6. If you want to use Jinja

Another template option is Jinja.  The released version of Jinja mostly works with App Engine.  To use it first {{{easy_install Jinja}}}, then edit the file {{{MyApplication/myapplication/config/environment.py}}}, changing the {{{config.init_app}}} line, and adding some code:

{{{
    # Initialize config with the basic options
    config.init_app(global_conf, app_conf, package='myapplication',
                    template_engine='jinja', paths=paths)


    config.add_template_engine(
        'jinja', '', {
            'jinja.package':            'testapp',
            'jinja.package_path':       'templates',
            'jinja.use_memcache':       False,
        })
}}}

Also, after installing Jinja, delete {{{lib/python2.5/site-packages/Jinja-1.2-py2.5-*.egg/jinja/_speedups*}}} (to work around [http://code.google.com/p/googleappengine/issues/detail?id=156&q=jinja&colspec=ID%20Type%20Status%20Priority%20Stars%20Owner%20Summary this bug]).

7. Install your application

To get your application installed, run (inside the virtualenv):

{{{
cd my-app/src/MyApplication
python setup.py develop
}}}

8. Fix up your paths

Because your file locations will change when you upload them, all your paths in the environment have to be relative.  There's some paths created for you when you ran {{{python setup.py develop}}}, so you have to run this script to fix them (and re-run it anytime you call that again).  Again in the virtualenv, run:

{{{
python -m pth_relpath_fixup
}}}

This will also give you a warning if there are any eggs installed as zip-files (the virtualenv should have configured easy_install not to do this, but it checks just in case that didn't work).  appengine currently does not support zipped packages.

9. Edit development.ini

At least you should edit development.ini to change the line {{{egg:MyApplication}}} to match your application name.  You can add other configuration as well in this file to control your application.

You can also copy over the develoment.ini file from your new Pylons application.

Currently there's no mechanism in paste-deploy.py to differentiate configuration under the SDK and configuration under the live App Engine environment.  But that should be added at some point.

If you installed the Beaker trunk, you can enable sessions with:

{{{
beaker.session.type = google
beaker.session.table_name = Session
}}}

The {{{Session}}} table is created automatically for you.

You should be aware that there's two {{{development.ini}}} files, one in the root of your environment, and another in {{{src/MyApplication/development.ini}}}.  {{{paste-deploy.py}}} is set to look at the first one, so if you edit the second one it will have no effect.  You can edit that file to use the second location if you want, or change the root {{{development.ini}}} to look like:

{{{
[app:main]
use = config:src/MyApplication/development.ini
}}}

10. Running you application

Your application should be ready to run under the SDK or on App Engine itself.  To run it in the SDK:

{{{
/usr/bin/python2.5 dev_appserver.py my-app
}}}

Note that you should *not* use the virtualenv python to run dev_appserver.py.  If you get an error about importing {{{site}}} then you probably started it in the virtualenv.  Note you can run {{{deactivate}}} on the shell to disable the virtualenv.  This is useful when you forget to use the right interpreter.

To upload the application:

{{{
/usr/bin/python2.5 appcfg.py update my-app
}}}

If you have many libraries you might find that you hit a [http://code.google.com/p/googleappengine/issues/detail?id=161&q=reporter:ianbicking&colspec=ID%20Type%20Status%20Priority%20Stars%20Owner%20Summary 1000 file limit].  This limit is stupid; please go star that ticket to learn when it will go away.  Sometimes unnecessary packages will be in {{{my-app/lib/python2.5/site-packages}}}, which you can delete to get under 1000 files.

Sometimes failures will be intermittent.  If it fails, try again.

You should get a lot of warnings about files that are too big.  This is okay.  These files would ideally be skipped with skip_files in app.yaml, but [http://code.google.com/p/googleappengine/issues/detail?id=80&q=reporter:ianbicking&colspec=ID%20Type%20Status%20Priority%20Stars%20Owner%20Summary I haven't figured it out yet].