#summary How to get Pylons working on appengine

= Introduction =

This describes the steps, using appengine-monkey, to get Pylons working on appengine.

= Details =

appengine has several modules and functions disabled which, by themselves, make it impossible to import many Pylons packages.  appengine-monkey restores many of those modules, and puts together the structure for deploying a Pylons application.  It is not closely tied to Python: any application that uses Setuptools will find this project useful (necessary) to get things functioning.

Here's the basic instructions:

1. Set up a new virtualenv-based sandbox.  

The option {{{--paste-deploy}}} tells it to write in the files for doing a [http://pythonpaste.org/deploy/ Paste Deploy] based application.  This reads a configuration file ({{{development.ini}}}) to load up the application, and sets up the CGI runner to send a request to that application.

Note that all applications need a unique name that you registered ahead of time with Google App Engine.  This name goes in your {{{app.yaml}}} file.  If you don't give {{{--app-name=a-name}}} then it will assume that the name of the directory you are using is the name of the application ({{{my-app}}} in the example):

{{{
python2.5 appengine-boot.py --paste-deploy my-app
}}}

2. Start using your virtualenv

You can use this virtualenv just like any other.  If you use {{{--paste-deploy}}}, the {{{paste-deploy.py}}} file will load up the libraries in the virtualenv.  Otherwise look at [http://appengine-monkey.googlecode.com/svn/trunk/paste-deploy.py paste-deploy.py] to get an idea of how to activate it.

To use a virtualenv for installing libraries and managing your project, do:

{{{
cd my-app
source bin/activate
}}}

This will change your prompt to help you remember you are working in the virtualenv, and commands you run will effect the virtualenv.  

3. Install the packages

In addition to Pylons, we'll install [http://jinja.pocoo.org/ Jinja], because currently it's one of the few templating options that work (Mako and Genshi both have issues with App Engine).

{{{
easy_install Pylons Jinja
}}}

4. Create your application

{{{
cd src
paster create --template=pylons MyApplication
}}}

5. Change templating engines

Since Mako isn't working (though fixes are in progress), we'll switch it to use Jinja.  Edit the file {{{MyApplication/myapplication/config/environment.py}}}, changing the {{{config.init_app}}} line, and adding some code:

{{{
    # Initialize config with the basic options
    config.init_app(global_conf, app_conf, package='myapplication',
                    template_engine='jinja', paths=paths)


    config.add_template_engine(
        'jinja', '', {
            'jinja.package':            'testapp',
            'jinja.package_path':       'templates',
            'jinja.use_memcache':       False,
        })
}}}

6. Install your application

To get your application installed, run (inside the virtualenv):

{{{
cd my-app/src/MyApplication
python setup.py develop
}}}

7. Fix up your paths

Because your file locations will change when you upload them, all your paths in the environment have to be relative.  There's some paths created for you when you ran {{{python setup.py develop}}}, so you have to run this script to fix them (and re-run it anytime you call that again).  Again in the virtualenv, run:

{{{
python -m pth_relpath_fixup
}}}

This will also give you a warning if there are any eggs installed as zip-files (the virtualenv should have configured easy_install not to do this, but it checks just in case that didn't work).  appengine currently does not support zipped packages.

8. Edit development.ini

At least you should edit development.ini to change the line {{{egg:MyApplication}}} to match your application name.  You can add other configuration as well in this file to control your application.

Currently there's no mechanism in paste-deploy.py to differentiate configuration under the SDK and configuration under the live App Engine environment.  But that should be added at some point.